<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select / Deselect
if (hover)
{
    if (mouse_check_button_pressed(mb_left) &amp;&amp; global.TYPING != id)
    {
        // keys that allow binding
        if (isKey(text))
        {
            if (keyboard_lastkey != -1)
            {
                text = keyboard_lastkey;
                keyboard_lastkey = -1;
                global.TYPING = -1;
                deselect(text);
            }
        }
        else
        {
            global.TYPING = id;
            keyboard_string = text;
        }
    }
}
else if (mouse_check_button_pressed(mb_left) &amp;&amp; global.TYPING == id)
{
    global.TYPING = -1;
    keyboard_string = "";
    text = deselect(text);
    
    // set
    switch (object_index)
    {
        case o_maxfps:
            maxFps = real(string_digits(text));
            if (maxFps &gt;= 60 &amp;&amp; maxFps &lt;= 120)
                global.MAXFPS = maxFps;
            break;
        case o_left:
            global.LEFT = text;
            break;
        case o_right:
            global.RIGHT = text;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Hover
hover = mouseOver(x, x + width, y, y + 24);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Rectangle
draw_rectangle_color(x, y, x + width, y + 24, c_gray, c_dkgray, c_gray, c_dkgray, false);
draw_rectangle_color(x + 2, y + 2, x + (width - 2), y + 22, c_white, c_white, c_white, c_white, false);

if(hover)
{
    // x, x + width, y, y + 24
    draw_rectangle_color(x, y, x + (width), y + 24, color, color, color, color, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw String
if (global.TYPING == id)
{
    if (string_length(keyboard_string) &lt; 4)
        text = select(keyboard_string);
    else
        keyboard_string = deselect(text);

    //drawText(x + 4, y + 2, text, c_black);
    drawTitle("Press any key", c_gray, false);
}
else
{
    // key masks
    switch(getKey(text))
    {
        case vk_left:
            drawText(x + 4, y + 2, "LEFT", c_black);
            break;
        case vk_up:
            drawText(x + 4, y + 2, "UP", c_black);
            break;    
        case vk_right:
            drawText(x + 4, y + 2, "RIGHT", c_black);
            break;
        default:
            drawText(x + 4, y + 2, chr(text), c_black);
            break;
    }
}

drawText(x - (string_length(title) * 10), y + 2, title, color);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
