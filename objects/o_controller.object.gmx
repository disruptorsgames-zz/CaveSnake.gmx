<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time = 3;
lives = 3;

if (room = r_world1)
{
    startx = (room_width - 16) / 2;
    starty = 16;
}
else if(room = r_world2)
{
    startx = 32;
    starty = (room_height - 16) / 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != r_menu)
{
    // countdown
    if (time &gt; 0)
        time -= 0.025;
    
    // spawn!
    if (time = 0 &amp;&amp; !instance_exists(o_snake) &amp;&amp; lives = 3)
        instance_create(startx, starty, o_snake);
    
    if(keyboard_check_pressed(vk_enter))
    {
        // alive but no snake
        if (lives &gt; 0 &amp;&amp; !instance_exists(o_snake))
            instance_create(startx, starty, o_snake);
        // game over
        else if (lives = 0)
            game_restart();
        // special win condition
        else if (lives = -1)
        {
            // determine where to go based on current room
            switch(room)
            {
                // go to world 2
                case r_world1:
                    room_goto(r_world2);
                    break;
                // reset
                case r_world2:
                    room_goto(r_menu);
                    break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// only show in game, not menu
if (room != r_menu)
{
    // draw the score and lives
    draw_set_font(f_hud);
    draw_set_halign(false);
    draw_roundrect(16, 16, 128, 55, 0);
    draw_text_color(22, 16, "Score:" + string(score), c_green, c_lime, c_green, c_lime, 1);
    draw_text_color(22, 32, "Lives:" + string(lives), c_maroon, c_red, c_maroon, c_red, 1);
    
    // text based on lives
    switch (lives)
    {
        // test
        case 3:
            if (time &gt; 0)
                drawTitle(string(round(time)), c_white, c_gray, c_white, c_gray, false);
            break;
        // first death
        case 2:
            if (!instance_exists(o_snake))
                drawTitle("Oops!", c_red, c_maroon, c_red, c_maroon, true);
            break;
        // last guy!
        case 1:
            if (!instance_exists(o_snake))
                drawTitle("Last life!", c_red, c_maroon, c_red, c_maroon, true);
            break;
        // game over man!
        case 0:
            drawTitle("Game Over!", c_red, c_maroon, c_red, c_maroon, true);
            break;
        // win
        case -1:
            color = make_color_rgb(181, 230, 29);
            drawTitle("Nice Job!", color, c_green, color, c_green, true);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(debug_mode)
{
    flag = phy_debug_render_shapes | phy_debug_render_aabb | phy_debug_render_collision_pairs | phy_debug_render_obb;
    physics_world_draw_debug(flag);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
